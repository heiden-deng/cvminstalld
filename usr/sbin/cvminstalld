#!/usr/bin/env python
#-*- coding:utf-8 -*-
#
#  Author: heiden deng (dengjq@sugon.com)
#  简单的http服务器，控制完成cvm服务的安装
#
import tornado.ioloop
import tornado.web
import os,re,sys
import vcell_iutils

MOUNT_POINT="/mnt/cvm_install_vhds"
cv_config_path = "/opt/cv/vcell.cfg"
vcell_install_status_file="/root/vcell_install_status"
cvm_install_status_file="/root/cvm_install_status"
success_tag="/opt/cvm_install_finished"
templates="/var/templates"

port = 8888

class MainHandler(tornado.web.RequestHandler):
    def get(self):
	if os.path.exists(success_tag):
            self.redirect("/cv_status")
	    return
        self.render("main.html")

class ConfigHandler(tornado.web.RequestHandler):

    def get(self):
        self.write("不正确的访问方式，该页面不能直接被访问！")

    def post(self):
	#self.set_header("Content-Type", "text/plain")
        if not os.path.exists(cv_config_path):
            self.write("在指定目录找到不到配置文件")
	else:
	    cf_fp = open(cv_config_path, "r")
	    config_content = cf_fp.read()
	    self.render("cv_config.html",cv_config=config_content)
	    cf_fp.close()


class InstallHandler(tornado.web.RequestHandler):

    def get(self):
        self.write("不正确的访问方式，该页面不能直接被访问！")

    def post(self):
	#self.set_header("Content-Type", "text/plain")
        if not os.path.exists(cv_config_path):
            self.write("CVM安装失败，在指定目录找到不到配置文件")
	else:
	    if not os.path.isdir(MOUNT_POINT):
                os.makedirs(MOUNT_POINT)
	    st_type = self.get_argument("store_server_type")
	    st_user = self.get_argument("user")
	    st_passwd = self.get_argument("passwd")
	    st_path = self.get_argument("vhd_path")
            mount_status = vcell_iutils.execWithCapture("umount",[MOUNT_POINT])
	    if st_type == "nfs":
                mount_status = vcell_iutils.execWithCapture("mount",["-t", "nfs", st_path, MOUNT_POINT])
            else:
                mount_status = vcell_iutils.execWithCapture("mount",["-t", "cifs", "-o", "username=%s,password=%s" % (st_user,st_passwd), st_path, MOUNT_POINT])
	    if not os.path.exists("%s/cloudview1.8.vhd" % (MOUNT_POINT,)) or \
	          not os.path.exists("%s/vrouter_template.vhd" % (MOUNT_POINT,)) or \
		  not os.path.exists("%s/vrouter_template_first.vhd" % (MOUNT_POINT,)) or  \
		  not os.path.exists("%s/rpm.iso" % (MOUNT_POINT,)):
               self.render("error.html",error_info = u"指定的存储路径下必须包含如下文件：cloudview1.8.vhd,rpm.iso,vrouter_template.vhd,vrouter_template_first.vhd")
	       return
            mount_status = "挂载成功"
	    cv_config = self.get_argument("cv_config")
	    #print cv_config
            vhd_dir_arg = "cv_vhd_dir="
	    m = re.search("cv_vhd_dir=\"(.*)\"",cv_config)
	    if m is None:
	        self.render("error.html",error_info= u"配置信息中未找到cv_vhd_dir变量，请修改配置后重新安装")
		return
	    vhd_dir = m.group(1)
            if not os.path.isdir(vhd_dir):
                os.makedirs(vhd_dir)
	    cf_fp = open(cv_config_path, "w")
	    cf_fp.write(cv_config)
	    cf_fp.close()

            create_link = u"删除 %s 下的文件或者链接" % (vhd_dir,)
            file_path = "%s/cloudview1.8.vhd" % (vhd_dir,)
	    if os.path.exists(file_path):
                os.remove(file_path)

            file_path = "%s/vrouter_template.vhd" % (vhd_dir,)
	    if os.path.exists(file_path):
                os.remove(file_path)

	    file_path = "%s/vrouter_template_first.vhd" % (vhd_dir,)
	    if os.path.exists(file_path):
                os.remove(file_path)

	    file_path = "%s/rpm.iso" % (vhd_dir,)
	    if os.path.exists(file_path):
               os.remove(file_path)

            create_link = create_link + u"<br>建立文件链接"
	    os.symlink("%s/cloudview1.8.vhd" % (MOUNT_POINT,), "%s/cloudview1.8.vhd" % (vhd_dir,))
	    os.symlink("%s/vrouter_template.vhd" % (MOUNT_POINT,), "%s/vrouter_template.vhd" % (vhd_dir,))
	    os.symlink("%s/vrouter_template_first.vhd" % (MOUNT_POINT,), "%s/vrouter_template_first.vhd" % (vhd_dir,))
	    os.symlink("%s/rpm.iso" % (MOUNT_POINT,), "%s/rpm.iso" % (vhd_dir,))

	    ret = vcell_iutils.execWithRedirect("cv", ["setup", "vcell"], stdout=vcell_install_status_file)
            if ret != 0:
		vi_fp = open(vcell_install_status_file,"r")
		info = vi_fp.read()
		vi_fp.close()
	        self.render("error.html",error_info=u"<br>执行cv setup vcell时出现错误，命令输出如下：<br>" % (info,))
		return

	    ret = vcell_iutils.execWithRedirect("cv", ["setup", "cvm"], stdout=cvm_install_status_file)
            if ret != 0:
		ci_fp = open(cvm_install_status_file,"r")
		info = ci_fp.read()
		ci_fp.close()
	        self.render("error.html",error_info=u"<br>执行cv setup cvm时出现错误，命令输出如下：<br>" % (info,))
		return
	    os.system("touch %s" % (success_tag,))
	    self.redirect("/cv_status")

class StatusHandler(tornado.web.RequestHandler):
    def get(self):
	if not os.path.exists(vcell_install_status_file) or not os.path.exists(cvm_install_status_file):
            self.render("status.html", cvm_status=u"您还没有开启CVM的安装过程",cv_setup_vcell="空",cv_setup_cvm="空")
	    return
	vi_fp = open(vcell_install_status_file,"r")
	v_info = vi_fp.read()
	vi_fp.close()

	ci_fp = open(cvm_install_status_file,"r")
	c_info = ci_fp.read()
	ci_fp.close()

	if os.path.exists(success_tag):
            self.render("status.html", cvm_status=u"CVM安装成功",cv_setup_vcell=v_info,cv_setup_cvm=c_info)
        else:
            self.render("status.html", cvm_status=u"CVM安装失败",cv_setup_vcell=v_info,cv_setup_cvm=c_info)

application = tornado.web.Application([
    (r"/", MainHandler),
    (r"/cv_config", ConfigHandler),
    (r"/cv_install", InstallHandler),
    (r"/cv_status", StatusHandler),

],template_path = templates)

if __name__ == "__main__":
    #http_server = tornado.httpserver.HTTPServer(application)
    #http_server.listen(options.port)
    if len(sys.argv) == 2:
        port = int(sys.argv[1])
    application.listen(port)
    tornado.ioloop.IOLoop.instance().start()
